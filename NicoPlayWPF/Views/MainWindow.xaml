<Window x:Class="NicoPlayWPF.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:NicoPlayWPF.Views"
        xmlns:vm="clr-namespace:NicoPlayWPF.ViewModels"
        xmlns:ControlBase="clr-namespace:NicoPlayWPF.ControlBase"
        Title="MainWindow" MinWidth="520" MinHeight="438" Width="707" Height="664" AllowDrop="True" Drop="DockPanel_Drop"
        Style="{StaticResource KMainWindowStyle}"
        Background="Transparent"
        AllowsTransparency="True"
        WindowStyle="None" ResizeMode="CanResizeWithGrip">
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <DockPanel 
        VerticalAlignment="Stretch" 
        Height="Auto">

        <DockPanel LastChildFill="True">

            <ControlBase:KTitleFrame x:Name="TitleFrame" DockPanel.Dock="Top" Background="{StaticResource TitleBrush}" Orientation="Horizontal" FlowDirection="RightToLeft">
                <Button Name="closeButton" HorizontalAlignment="Right" VerticalAlignment="Center" MinHeight="20" MaxHeight="20" MinWidth="20" MaxWidth="20" 
                        Content="X"
                        Style="{StaticResource KTitleButtonStyle}"
                        Click="closeButton_Click">
                </Button>
                <Button Name="minimizeButton" HorizontalAlignment="Right" VerticalAlignment="Center" MinHeight="20" MaxHeight="20" MinWidth="20" MaxWidth="20"
                        Content="-"
                        Style="{StaticResource KTitleButtonStyle}"
                        Click="minimizeButton_Click">
                </Button>
                <Button x:Name="deleteButton" HorizontalAlignment="Right" VerticalAlignment="Center" MinHeight="20" MaxHeight="20" MinWidth="20" MaxWidth="20" Margin="40, 0, 0, 0"
                	Content="Φ"
                	Style="{StaticResource KTitleButtonStyle}"
                	Click="deleteButton_Click"/>
            </ControlBase:KTitleFrame>
            <Grid Name="BottomBar" DockPanel.Dock="Bottom">

                <DockPanel Height="24" MinHeight="24" MaxHeight="24">
                    <ToggleButton 
                        Name="playPauseButton"  
                        Content="▶" DockPanel.Dock="Left" Width="24" VerticalAlignment="Center"
                        Checked="PlayPauseButton_Checked" Unchecked="PlayPauseButton_Unchecked" FontWeight="Bold"
                        Style="{StaticResource KToggleButtonStyle}" />
                    <Button 
                        Name="stopButton"
                        Content="■" DockPanel.Dock="Left" Width="24" VerticalAlignment="Center"
                        Click="StopButton_Click" FontWeight="Bold"
                        Style="{StaticResource KButtonStyle}" />

                    <Grid Width="20" DockPanel.Dock="Right">
                    </Grid>
                    <Slider
                        Name="volSlider"
                        DockPanel.Dock="Right" MaxWidth="60" MinWidth="60"  VerticalAlignment="Center" IsMoveToPointEnabled="True" Maximum="100" Value="30"/>
                    <ToggleButton 
                        Name="shadowOffButton"
                        Content="SS" DockPanel.Dock="Right" Width="24" VerticalAlignment="Center"
                        Checked="ShadowOffButton_Checked" Unchecked="ShadowOffButton_Unchecked" FontWeight="Bold"
                        Style="{StaticResource KToggleButtonStyle}"
                        IsChecked="True"/>
                    <ToggleButton 
                        Name="commentOffButton"
                        Content="On" DockPanel.Dock="Right" Width="24" VerticalAlignment="Center"
                        Checked="CommentOffButton_Checked" Unchecked="CommentOffButton_Unchecked" FontWeight="Bold"
                        Style="{StaticResource KToggleButtonStyle}" />
                    <TextBlock
                        Name="timeText"
                        DockPanel.Dock="Right" VerticalAlignment="Center"
                        Text="--:--/--:--"/>

                    <Slider 
                        Name="positionSlider"
                        VerticalAlignment="Center" IsMoveToPointEnabled="True" Maximum="10000"></Slider>
                </DockPanel>
            </Grid>

            <StackPanel DockPanel.Dock="Top" VerticalAlignment="Center">
                <Grid>
                    <Grid Name="container" Panel.ZIndex="2" IsHitTestVisible="False">
                    </Grid>
                    <MediaElement Name="me" Panel.ZIndex="1"
                                  LoadedBehavior="Manual" ScrubbingEnabled="True"/>
                </Grid>
            </StackPanel>

        </DockPanel>
    </DockPanel>
</Window>
